# global variable to use
COLLECTION = 'ISPY2'
SCAN = 'ISPY2: VOLSER: bi-lateral: SER'
MASK = 'ISPY2: VOLSER: bi-lateral: Analysis Mask'
PATIENT_IDS = ['ISPY2-115638']
TIMES = [0,1,2,3]
PERM_STORAGE='../perm'



# target OUTPUT files for the whole workflow
rule all:
    input:
        radiomics=expand("../workflow/results/radiomics/{patient_id}_{times}.csv", patient_id=PATIENT_IDS, times=TIMES)

rule download_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    params:
        collection = COLLECTION,
        scan = SCAN,
        patient_ids = PATIENT_IDS,
        scan_storage = "../workflow/results/scans/",
    output:
        temporary(directory(expand("../workflow/results/scans/{patient_id}_{times}", patient_id=PATIENT_IDS, times=TIMES))),
    script:
        "../workflow/scripts/download_scans.py"

rule download_masks:
    conda:
        '../workflow/env/radiomics_conda.yml'
    params:
        collection = COLLECTION,
        mask = MASK,
        patient_ids = PATIENT_IDS,
        mask_storage = "../workflow/results/masks/"
    output:
        temporary(directory(expand("../workflow/results/masks/{patient_id}_{times}", patient_id=PATIENT_IDS, times=TIMES)))
    script:
        "../workflow/scripts/download_masks.py"

rule process_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        expand("../workflow/results/scans/{patient_id}_{times}", patient_id=PATIENT_IDS, times=TIMES),
    output:
        expand("../workflow/results/scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES)
    script:
        "../workflow/scripts/process_scans.py"

rule process_masks:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        mask_folders=expand("../workflow/results/masks/{patient_id}_{times}", patient_id=PATIENT_IDS, times=TIMES),
    output:
        masks=expand("../workflow/results/masks/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES),
    script:
        "../workflow/scripts/process_masks.py"

rule generate_bounding_boxes:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        masks=expand("../workflow/results/masks/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES), 
        scans=expand("../workflow/results/scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES)
    output:
        bounding_boxes=expand("../workflow/results/bounding_boxes/{patient_id}_{times}.npy", patient_id=PATIENT_IDS, times=TIMES)
    script:
        "../workflow/scripts/generate_bounding_boxes.py"

rule crop_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        masks=expand("../workflow/results/masks/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES), 
        scans=expand("../workflow/results/scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES),
        bounding_boxes=expand("../workflow/results/bounding_boxes/{patient_id}_{times}.npy", patient_id=PATIENT_IDS, times=TIMES)
    output:
        cropped_scans=expand("../workflow/results/cropped_scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES),
        cropped_masks=temporary(expand("../workflow/results/cropped_masks/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES))
    script:
        "../workflow/scripts/crop_scans.py"

rule extract_radiomics:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        cropped_scans=expand("../workflow/results/cropped_scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES), 
        cropped_masks=expand("../workflow/results/cropped_scans/{patient_id}_{times}.nrrd", patient_id=PATIENT_IDS, times=TIMES)
    output:
        radiomics=expand("../workflow/results/radiomics/{patient_id}_{times}.csv", patient_id=PATIENT_IDS, times=TIMES)
    script: 
        "../workflow/scripts/extract_radiomics.py"

