# Collection and scan and mask identifying names.
COLLECTION = 'ISPY2'
SCAN_NAME = 'ISPY2: VOLSER: bi-lateral: SER'
MASK_NAME = 'ISPY2: VOLSER: bi-lateral: Analysis Mask'

# Images in ISPY2 are unqiue for a specific patient and a specific time, because each patient is imaged multiple time. Times in ISPY2 are a simple ordering of images, not a specific calander time.
PATIENT_IDS = ['ISPY2-115638']
TIMES = [0,1,2,3]

# Path to a permanent location to store the outputs of this workflow.
PERM_STORAGE='../perm'


# Header rule for default behavior for the whole workflow.
rule all:
    input:
        # Three images are permanetly stored. The mask itself, the scan, and the scan cropped to the area of interest by the mask.
        expand('{perm_storage}/{image_types}/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES, perm_storage=PERM_STORAGE, image_types=['masks', 'scans', 'cropped_scans']),

        # Additionally, the bounding box used for that cropping is stored.
        expand('{perm_storage}/bounding_boxes/{patient_id}_{times}.npy', patient_id=PATIENT_IDS, times=TIMES, perm_storage=PERM_STORAGE),

        # And the radiomics extracted for the scan mask pair is stored.
        expand('{perm_storage}/radiomics/{patient_id}_{times}.csv', patient_id=PATIENT_IDS, times=TIMES, perm_storage=PERM_STORAGE)

rule download_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    params:
        collection = COLLECTION,
        image_name = SCAN_NAME,
        patient_ids = PATIENT_IDS,
        temp_storage = '../workflow/results/scans/',
    output:
        temporary(directory(expand('../workflow/results/scans/{patient_id}_{times}', patient_id=PATIENT_IDS, times=TIMES))),
    script:
        '../workflow/scripts/download_images.py'

rule download_masks:
    conda:
        '../workflow/env/radiomics_conda.yml'
    params:
        collection = COLLECTION,
        image_name = MASK_NAME,
        patient_ids = PATIENT_IDS,
        temp_storage = '../workflow/results/masks/'
    output:
        temporary(directory(expand("../workflow/results/masks/{patient_id}_{times}", patient_id=PATIENT_IDS, times=TIMES)))
    script:
        '../workflow/scripts/download_images.py'

rule process_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        scan_folders=expand('../workflow/results/scans/{patient_id}_{times}', patient_id=PATIENT_IDS, times=TIMES),
    output:
        scan_filenames=temporary(expand('../workflow/results/scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES))
    script:
        '../workflow/scripts/process_scans.py'

rule process_masks:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        mask_folders=expand('../workflow/results/masks/{patient_id}_{times}', patient_id=PATIENT_IDS, times=TIMES),
    output:
        mask_filenames=temporary(expand('../workflow/results/masks/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES)),
    script:
        '../workflow/scripts/process_masks.py'

rule generate_bounding_boxes:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        mask_filenames=expand('../workflow/results/masks/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES), 
        scan_filenames=expand('../workflow/results/scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES)
    output:
        bounding_box_filenames=temporary(expand('../workflow/results/bounding_boxes/{patient_id}_{times}.npy', patient_id=PATIENT_IDS, times=TIMES))
    script:
        '../workflow/scripts/generate_bounding_boxes.py'

rule crop_scans:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        mask_filenames=expand('../workflow/results/masks/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES), 
        scan_filenames=expand('../workflow/results/scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES),
        bounding_box_filenames=expand('../workflow/results/bounding_boxes/{patient_id}_{times}.npy', patient_id=PATIENT_IDS, times=TIMES)
    output:
        cropped_scan_filenames=temporary(expand('../workflow/results/cropped_scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES)),
        cropped_mask_filenames=temporary(expand('../workflow/results/cropped_masks/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES))
    script:
        '../workflow/scripts/crop_scans.py'

rule extract_radiomics:
    conda:
        '../workflow/env/radiomics_conda.yml'
    input:
        cropped_scan_filenames=expand('../workflow/results/cropped_scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES), 
        cropped_mask_filenames=expand('../workflow/results/cropped_scans/{patient_id}_{times}.nrrd', patient_id=PATIENT_IDS, times=TIMES)
    output:
        radiomics_filenames=temporary(expand('../workflow/results/radiomics/{patient_id}_{times}.csv', patient_id=PATIENT_IDS, times=TIMES))
    script: 
        '../workflow/scripts/extract_radiomics.py'

rule move_files_to_perm_storage:
    input:
        '../workflow/results/{result_type}/{ID}.{filetype}'
    output:
        '{PERM_STORAGE}/{result_type}/{ID}.{filetype}'
    shell:
        'cp {input} {output}'

